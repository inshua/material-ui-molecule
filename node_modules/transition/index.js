import "../molecule/molecule-comp.js";

export class Transition {
    constructor(classNames, timeout, eventTypeMapping){
        this.classNames = classNames;
        this.eventTypeMapping = eventTypeMapping;

        this.timeout = timeout;

        this.molecule = null;       // plug when *install*

        this.__timeouts = [];
        this.__willDo = [];

        const handlers = ['inited', 'willEnter', 'entered', 'swap', 'willLeave', 'leaved']
        const events = ['inited', 'willenter', 'entered', 'swap', 'willleave', 'leaved']
        const self = this;
        for(let i=0; i<handlers.length; i++){
            const h = handlers[i];
            const eventType = events[i]
            const className = this.getClassName(eventType);  
            const timeout = this.getTimeout(eventType);
            if(className){
                this[h] = function(event){
                    if(self.__timeouts.length){
                        for(let h of self.__timeouts){
                            clearTimeout(h);
                        }
                        self.__timeouts = []
                    }
                    if(self.__willDo.length){
                        for(let d of self.__willDo){
                            d();
                        }
                        self.__willDo = [];
                    }


                    const t = event.target;
                    event.detail.addTask(new Promise(function(resolve, reject){
                        t.classList.add(className);
                        const fun = function(){
                            t.classList.remove(className);
                        };
                        const h = setTimeout(fun, timeout);
                        self.__timeouts.push(h);
                        self.__willDo.push(fun);
                        if(eventType == 'willenter'){
                            resolve();
                        } else {
                            const h2 = setTimeout(resolve, timeout);
                            self.__timeouts.push(h2);
                            self.__willDo.push(resolve);
                        }
                    }));
                }             
            }   
        }
    }

    getClassName(eventType){
        if(this.eventTypeMapping){
            const c = this.eventTypeMapping[eventType];
            if(c){
                if(typeof this.classNames == 'object'){
                    return this.classNames[c];
                } else{
                    return this.classNames + '-' + c;
                }
            }
        }
        if(typeof this.classNames == 'object'){
            return this.classNames[eventType];
        } else {
            return this.classNames + '-' + eventType;   // such as fade-willleave
        }
    }

    getTimeout(eventType){
        if(typeof this.timeout == 'object'){
            return this.timeout[eventType]
        } else {
            return this.timeout;
        }
    }
    
}